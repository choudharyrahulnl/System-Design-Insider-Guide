////////////////////////////////
// INVENTORY MANAGEMENT SYSTEM
////////////////////////////////


// PRODUCT -> LOCATION <- STOCK/UNIT
// PRODUCT TABLE: productId, productDescription, productCost
// STOCK/UNITS/INVENTORY TABLE: productId, locationId, quantity, status(INVENTORY, TRANSIT, DELIVERED)
// Location TABLE: locationId, type(small, medium,large)

// User scan a new product using bar code it will create a entry in product table with all details,
// inventory table (1 unit at a time)
// and we can select location which will make entry in location table

// ACTOR
// User can be of 2 type admin, normal user
// Admin can add/update/delete product + create/delete users in Inventory Management System
// Normal user can add/update/delete product in Inventory Management System





// REQUIREMENT GATHERING
// PRODUCT ONBOARDING - (WEIGHT + DIMENSION (SMALL, MEDIUM, LARGE))
// UPDATE PRODUCT PRICE
// UPDATE PRODUCT UNITS - ADD/UPDATE/REMOVE
// PRODUCT LOCATION (SHELF AS ROBOT WILL PICK UP)
// STATUS OF UNIT ( AVAILABLE, BOOKED, PICKED, PACKAGED, READY FOR DELIVERY)
// REPORT/ANALYTICS - GENERATED BY SYSTEM

// ACTORS
// USER - WILL ADD/UPDATE/DELETE PRODUCTS, UNITS/PRICE (WORKER, MANAGER, ADMIN) + VIEW REPORT/ANALYTICS
// SYSTEM - PRODUCT LOCATION + STATUS OF UNITS + REPORT/ANALYTICS + UPDATE PRODUCTS UNITS/PRICE

// NOTE: SYSTEM IS SOMETHING WE PROVIDE INPUT AND IT PERFORM ACTION ON YOUR BEHALF



// CLASS DIAGRAM

// USER -         / addProduct(product), updateProductCount(productId, newCount), updateProductPrice(productId, newPrice)
// PRODUCT - id, price, description, weight, size /
// UNIT - id, productId, locationId, quantity, status (INVENTORY, TRANSIT, DELIVERED) as ENUM,
// LOCATION - id, type(SMALL, MEDIUM, LARGE)

// NOTE: PRODUCT HAS UNITS WHICH IS MAPPED TO LOCATION WITH TYPE SMALL, MEDIUM, LARGE
// PRODUCT MAPPED TO UNITS & UNITS MAPPED TO LOCATION


// SYSTEM - getProduct(productId), getProductList(), getShelfStatus(), addProduct(product), placeUnits() algo, getUnit() / generateReport(), getProductLocation(), setProductLocation(), updateProductStatus(product)


// public class InventorySystem {
//      static Map<String,Product> productMap = new HashMap<>();
//      static Map<Location,Unit> locationMap = new HashMap<>();
//
//      public static void addProduct(Product product) {
//          productMap.put(product.id, product);
//      }
//
//      public static Product getProduct(String productId) {
//          return productMap.get(product.id);
//      }
//
//      public static Product getAllProduct() {
//          return productMap;
//      }
//
//      public static Map<Location,Unit> getShelvesStatus() {
//          return locationMap;
//      }
//
//      public static placeUnit(Unit unit) {
//          // Find which location is best suit for this product - we need to use some algorithm
//          unit.locationId = ""
//      }
//
//      public static removeUnit(Product product) {
//          // Find which location is best suit for this product - we need to use some algorithm
//          unit.locationId = ""
//      }
//
//      public static updateStatus(Unit unit, Status status) {
//          unit.status = status;
//      }
// }


// public class Product {
//      String id;
//      Double price;
//      String description;
//      double weight;
//      Size size;
// }

// public class Unit {
//      String id;
//      String productId;
//      String locationId;
//      Status status;
// }

// public class Location {
//      String id;
//      Size size;
// }

// enum Status {
//  INVENTORY, TRANSIT, DELIVERED
// }

// enum Size {
//  S,M,L
// }

// public class User {
//
//    public addProduct() {
//         InventorySystem.addProduct(new Product("1",10Euro,"Soap",10kg,Size.L))
//    }
//
//    public executeOrder(Order order) {
//         for(Map.Entry<Product, Integer> item: order.productCount.entrySet()) {
//              for(int i=0; i < item.getValue(); i++) {
//                      InventorySystem.removeUnit(item.getKey());
//                 }
//          }
//    }
// }

// public class Order {
//      Map<Product, Integer> productCount = new HashMap<>();
//
// }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

